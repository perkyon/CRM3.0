import { supabase } from './config';

export async function createAuthUsers() {
  console.log('üë• Creating auth users in Supabase...');
  
  try {
    // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    const users = [
      {
        email: 'syroejkin@workshop.ru',
        password: 'admin123',
        name: '–°—ã—Ä–æ–µ–∂–∫–∏–Ω',
        role: 'Admin'
      },
      {
        email: 'o.smirnov@workshop.ru',
        password: 'master123',
        name: '–û–ª–µ–≥ –°–º–∏—Ä–Ω–æ–≤',
        role: 'Master'
      },
      {
        email: 'd.kozlov@workshop.ru',
        password: 'procurement123',
        name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
        role: 'Procurement'
      },
      {
        email: 'a.volkova@workshop.ru',
        password: 'accountant123',
        name: '–ê–Ω–Ω–∞ –í–æ–ª–∫–æ–≤–∞',
        role: 'Accountant'
      }
    ];

    const results = [];

    for (const user of users) {
      try {
        console.log(`Creating user: ${user.email}`);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase Auth
        const { data, error } = await supabase.auth.admin.createUser({
          email: user.email,
          password: user.password,
          email_confirm: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
          user_metadata: {
            name: user.name,
            role: user.role
          }
        });

        if (error) {
          console.log(`‚ö†Ô∏è Error creating ${user.email}:`, error.message);
          results.push({ email: user.email, success: false, error: error.message });
        } else {
          console.log(`‚úÖ Created user: ${user.email} (ID: ${data.user?.id})`);
          results.push({ email: user.email, success: true, id: data.user?.id });
        }
      } catch (err) {
        console.log(`‚ùå Failed to create ${user.email}:`, err);
        results.push({ email: user.email, success: false, error: err });
      }
    }

    console.log('üìä Results:', results);
    return results;

  } catch (error) {
    console.error('‚ùå Failed to create auth users:', error);
    return [];
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ signUp (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ admin –ø—Ä–∞–≤)
export async function createAuthUsersViaSignUp() {
  console.log('üë• Creating auth users via signUp...');
  
  try {
    const users = [
      {
        email: 'syroejkin@workshop.ru',
        password: 'admin123',
        name: '–°—ã—Ä–æ–µ–∂–∫–∏–Ω'
      },
      {
        email: 'o.smirnov@workshop.ru',
        password: 'master123',
        name: '–û–ª–µ–≥ –°–º–∏—Ä–Ω–æ–≤'
      },
      {
        email: 'd.kozlov@workshop.ru',
        password: 'procurement123',
        name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤'
      },
      {
        email: 'a.volkova@workshop.ru',
        password: 'accountant123',
        name: '–ê–Ω–Ω–∞ –í–æ–ª–∫–æ–≤–∞'
      }
    ];

    const results = [];

    for (const user of users) {
      try {
        console.log(`Signing up user: ${user.email}`);
        
        const { data, error } = await supabase.auth.signUp({
          email: user.email,
          password: user.password,
          options: {
            data: {
              name: user.name
            }
          }
        });

        if (error) {
          console.log(`‚ö†Ô∏è Error signing up ${user.email}:`, error.message);
          results.push({ email: user.email, success: false, error: error.message });
        } else {
          console.log(`‚úÖ Signed up user: ${user.email} (ID: ${data.user?.id})`);
          results.push({ email: user.email, success: true, id: data.user?.id });
        }
      } catch (err) {
        console.log(`‚ùå Failed to sign up ${user.email}:`, err);
        results.push({ email: user.email, success: false, error: err });
      }
    }

    console.log('üìä Results:', results);
    return results;

  } catch (error) {
    console.error('‚ùå Failed to create auth users via signUp:', error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É auth.users –∏ users —Ç–∞–±–ª–∏—Ü–µ–π
export async function syncUsersWithAuth() {
  console.log('üîÑ Syncing users with auth...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ auth.users
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.log('‚ö†Ô∏è Could not get auth users:', authError.message);
      return;
    }

    console.log(`Found ${authUsers.users.length} auth users`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –Ω–∞—à–µ–π users —Ç–∞–±–ª–∏—Ü—ã
    const { data: dbUsers, error: dbError } = await supabase
      .from('users')
      .select('*');

    if (dbError) {
      console.log('‚ö†Ô∏è Could not get db users:', dbError.message);
      return;
    }

    console.log(`Found ${dbUsers.length} db users`);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    for (const authUser of authUsers.users) {
      const dbUser = dbUsers.find(u => u.email === authUser.email);
      
      if (dbUser) {
        // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ
        const { error: updateError } = await supabase
          .from('users')
          .update({ 
            id: authUser.id,
            updated_at: new Date().toISOString()
          })
          .eq('email', authUser.email);

        if (updateError) {
          console.log(`‚ö†Ô∏è Could not update user ${authUser.email}:`, updateError.message);
        } else {
          console.log(`‚úÖ Synced user: ${authUser.email}`);
        }
      }
    }

  } catch (error) {
    console.error('‚ùå Failed to sync users:', error);
  }
}

// Make available globally for debugging
if (typeof window !== 'undefined') {
  (window as any).createAuthUsers = createAuthUsers;
  (window as any).createAuthUsersViaSignUp = createAuthUsersViaSignUp;
  (window as any).syncUsersWithAuth = syncUsersWithAuth;
  console.log('üë• Auth user creators made available globally');
}
